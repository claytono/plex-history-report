#!/bin/bash
# Script to check if files comply with EditorConfig rules using editorconfig-checker

# Exit on any error
set -e

# Determine platform and architecture for download
PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)
if [[ "$ARCH" == "x86_64" ]]; then
    ARCH="amd64"
elif [[ "$ARCH" == "arm64" ]]; then
    ARCH="arm64"
fi

# Set up editorconfig-checker binary directory
BIN_DIR="$(pwd)/.bin"
EC_VERSION="3.3.0" # Current latest version
EC_BINARY="$BIN_DIR/ec"

# Create the .bin directory if it doesn't exist
mkdir -p "$BIN_DIR"

# Check if editorconfig-checker is installed
if [ ! -f "$EC_BINARY" ]; then
    echo "editorconfig-checker not found. Downloading version $EC_VERSION..."

    # Set the download URL based on platform
    DOWNLOAD_URL="https://github.com/editorconfig-checker/editorconfig-checker/releases/download/v${EC_VERSION}/ec-${PLATFORM}-${ARCH}.tar.gz"
    echo "Download URL: $DOWNLOAD_URL"

    # Create temporary directory for extraction
    TMP_DIR=$(mktemp -d)
    TMP_FILE="$TMP_DIR/ec.tar.gz"

    # Download the archive
    echo "Downloading..."
    if ! curl -L -s "$DOWNLOAD_URL" -o "$TMP_FILE"; then
        echo "Failed to download editorconfig-checker from $DOWNLOAD_URL"
        rm -rf "$TMP_DIR"
        exit 1
    fi

    echo "Extracting..."
    tar -xzf "$TMP_FILE" -C "$TMP_DIR"

    # Find the ec binary in the extracted files (may have platform suffix in name)
    echo "Finding binary..."
    EC_EXTRACTED=$(find "$TMP_DIR" -type f -name "ec-*" | head -1)

    if [ -z "$EC_EXTRACTED" ]; then
        echo "Could not find ec binary in the extracted files. Contents of temp directory:"
        find "$TMP_DIR" -type f
        rm -rf "$TMP_DIR"
        exit 1
    fi

    # Move the binary to our .bin directory and rename it to ec
    cp "$EC_EXTRACTED" "$EC_BINARY"
    chmod +x "$EC_BINARY"

    echo "Successfully installed editorconfig-checker to $EC_BINARY"
    rm -rf "$TMP_DIR"
fi

# Process command-line arguments
if [ $# -eq 0 ]; then
    echo "Running EditorConfig check on tracked files (respecting .gitignore)"
    # Get all tracked files from git
    ARGS=()
    while IFS= read -r file; do
        # Skip .bin directory and Markdown files
        if [[ "$file" != .bin/* && "$file" != *.md ]]; then
            # Check if the file exists (it might have been removed)
            if [ -f "$file" ]; then
                # Check if the file is a text file by looking for null bytes
                # Binary files almost always contain null bytes, text files almost never do
                if ! grep -q -U $'\x00' "$file" 2>/dev/null; then
                    ARGS+=("$file")
                fi
            fi
        fi
    done < <(git --no-pager ls-files)
else
    # Use provided arguments but check if they exist
    ARGS=()
    for file in "$@"; do
        if [ -f "$file" ]; then
            ARGS+=("$file")
        else
            echo "Warning: File does not exist, skipping: $file"
        fi
    done
fi

# Run editorconfig-checker with the determined arguments
if [ ${#ARGS[@]} -eq 0 ]; then
    echo "No files to check."
    echo -e "\nEditorConfig check completed successfully."
    exit 0
fi

echo "Running: $EC_BINARY ${ARGS[*]}"
if ! "$EC_BINARY" "${ARGS[@]}"; then
    echo -e "\nEditorConfig check found issues."
    exit 1
fi

echo -e "\nEditorConfig check completed successfully."

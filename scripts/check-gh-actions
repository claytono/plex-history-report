#!/usr/bin/env bash
# Script to check GitHub Actions workflow runs and retrieve logs for failed runs

set -e

# Repository information
REPO_URL=$(git --no-pager config --get remote.origin.url)
REPO_PATH=$(echo "$REPO_URL" | sed -E 's/.*github.com[:/]([^/]+\/[^/]+)(\.git)?$/\1/')
BRANCH=$(git --no-pager branch --show-current)

# Function to print usage information
usage() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  -b, --branch BRANCH    Specify branch name (default: current branch)"
    echo "  -n, --no-wait          Don't wait for in-progress workflows to complete"
    echo "  -t, --timeout SECONDS  Timeout in seconds when waiting (default: 300)"
    echo "  -i, --interval SECONDS Watch interval in seconds (default: 1)"
    echo "  -f, --fail-fast        Exit on first check failure"
    echo "  -h, --help             Show this help message"
    exit 1
}

# Parse command-line arguments
WAIT_FOR_COMPLETION=true
TIMEOUT=300
WATCH_INTERVAL=1
FAIL_FAST=""
PR_ARG=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -b|--branch)
            BRANCH="$2"
            PR_ARG="$BRANCH"
            shift 2
            ;;
        -n|--no-wait)
            WAIT_FOR_COMPLETION=false
            shift
            ;;
        -f|--fail-fast)
            FAIL_FAST="--fail-fast"
            shift
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        -i|--interval)
            WATCH_INTERVAL="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo "Error: GitHub CLI (gh) is not installed."
    echo "Please install it from https://cli.github.com/"
    exit 1
fi

# Check if authenticated with GitHub
if ! gh auth status &> /dev/null; then
    echo "Error: Not authenticated with GitHub."
    echo "Please run 'gh auth login' to authenticate."
    exit 1
fi

echo "Checking workflow runs for branch: ${BRANCH}"
echo "Repository: ${REPO_PATH}"

# Function to get detailed logs for failed runs
get_failed_run_logs() {
    # Get recent workflow runs that failed
    echo "Checking for failed workflow runs..."

    # Try to get a PR number if we don't already have it
    PR_NUMBER=""
    if [[ -z "$PR_ARG" ]]; then
        PR_NUMBER=$(gh pr list --head "$BRANCH" --json number --jq '.[0].number')
    else
        PR_NUMBER="$PR_ARG"
    fi

    if [[ -n "$PR_NUMBER" ]]; then
        # Get information about the failed checks
        FAILED_CHECKS=$(gh pr checks "$PR_NUMBER" --json name,conclusion,url --jq '.[] | select(.conclusion != "success" and .conclusion != null)')

        if [[ -n "$FAILED_CHECKS" ]]; then
            echo "Found failed checks. Retrieving detailed logs..."

            # List recent failed workflow runs
            FAILED_RUNS=$(gh run list --branch "$BRANCH" --json databaseId,name,conclusion,url --jq '.[] | select(.conclusion != "success" and .conclusion != "skipped" and .conclusion != null)')

            if [[ -n "$FAILED_RUNS" ]]; then
                echo "$FAILED_RUNS" | jq -c '.' | while read -r run; do
                    run_id=$(echo "$run" | jq -r '.databaseId')
                    run_name=$(echo "$run" | jq -r '.name')
                    echo "===== Failed workflow: $run_name (ID: $run_id) ====="
                    echo "Retrieving logs..."
                    gh run view "$run_id" --log
                    echo "============================================================"
                done
            else
                echo "No detailed logs available for the failed checks."
            fi
        fi
    fi
}

if [[ "$WAIT_FOR_COMPLETION" == "true" ]]; then
    echo "Waiting for workflows to complete (timeout: ${TIMEOUT}s)..."

    # Use gh pr checks with --watch and optional --fail-fast
    echo "Checking PR status every ${WATCH_INTERVAL} seconds..."
    gh pr checks "$PR_ARG" --watch --interval "$WATCH_INTERVAL" $FAIL_FAST
    EXIT_CODE=$?

    if [[ $EXIT_CODE -eq 0 ]]; then
        echo "All checks passed successfully!"
    elif [[ $EXIT_CODE -eq 8 ]]; then
        echo "Checks are still pending after timeout."
        exit 1
    else
        echo "Some checks failed. See details below:"
        gh pr checks "$PR_ARG" --required
        get_failed_run_logs
        exit $EXIT_CODE
    fi
else
    # Just show the current status without waiting
    echo "Current CI status:"
    gh pr checks "$PR_ARG"
    EXIT_CODE=$?

    if [[ $EXIT_CODE -ne 0 ]]; then
        echo "Use the default wait mode to monitor checks until completion."
        get_failed_run_logs
        exit $EXIT_CODE
    fi
fi

exit 0
